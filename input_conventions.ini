;The input file is required to be an ini type!
;
;<item>_coordsys-item
;You can specify the coordinate system used for almost every item
;containing vectors by adding an <item>_coordsys-item
;inside the section which contains <item>.
;This does not apply to the lattice_vector-item.
;It is required to be in cartesian coordinates.
;Possible arguments: "cartesian", "lattice"
;Be sure to note all defaults are "lattice"!
;
;Example:
;basis_coordsys: cartesian
;
;Please be careful concerning your choice of numbers.
;Not integer values must be given as proper floats or the input
;may be misinterpreted.
;
;Please note: Assigning multiple items with identical names will cause only
;the last item to be used when processing.
;
;Every body (so every section except for geometry) features an order item
;which is required to be a positive integer.
;Bodies will be calculated in the specified order.
;Multiple bodies may be given the same order.
;Bodies with an even integer will be removed from the momentary amount of atoms,
;bodies with an uneven order are added.
;All bodies' default order is 1.
;Bodies with order 0 or less will be ignored.

;Every ini requires have a [geometry]-section!
[geometry]

;The [geometry]-section must have a lattice_vectors-item
;containing the concatenation of the three lattice vectors!
;The elements need to be separated by white spaces and given in horizontal shape.
;(first line: first vector
;second line: second vector...)
2;Example:
lattice_vectors: 4.33300000  0.00000000  0.00000000
		 0.00000000  7.06200000  0.00000000
		 0.00000000  0.00000000  7.76400000

;The [geometry]-section must have a basis-item
;containing the concatenation of the atoms' identifiers
;followed by their basis vectors!
;The elements need to be separated by whitespaces.
basis:	Ag -0.14300000  0.11900000  0.45600000
	Ag  0.64300000 -0.11900000  0.95600000
	Ag  0.14300000  0.61900000  0.04400000
	Ag  0.35700000  0.38100000 -0.45600000
	Au  0.47800000 -0.22100000  0.36100000
	Au  0.02200000  0.22100000  0.86100000
	Au -0.47800000  0.27900000  0.13900000
	Au  0.97800000  0.72100000 -0.36100000
	Se  0.10800000 -0.01500000  0.14900000
	Se  0.39200000  0.01500000  0.64900000
	Se -0.10800000  0.48500000  0.35100000
	Se  0.60800000  0.51500000 -0.14900000

;If a [sphere name]-section is present a sphere with the specified
;attributes is determined.
;You may chose any name which does not conflict with the ini conventions,
;you may also note no name but the [sphere] section is required.
[sphere: first]

;The [sphere]-section must have a radius_vector-item
;containing a vector from the centre to an arbitrary point
;on the surface of the sphere as well as the shift_vector
;from the origin to the sphere"s centre.
;The elements need to be separated by white spaces!
radius_vector: 5 0 0
radius_vector_coordsys: cartesian
shift_vector: 0 0 0


;If a [convex_polyhedron name]-section is present a body determined by a
;given amount of planes will be calculated. 
[convex_polyhedron second]

;The planes in the [convex_polyhedron]-section may be determined by
;either normal form (a plane's normal vector and its distance from the origin)
;via a planes_normal item or by its miller indices and it's distance from the origin
;via a planes_miller item.
;To make certain the proper body is calculated an arbitrary point inside of the body
;should be given. [0,0,0] is default and will cause errors if it is not inside the body.
;Example:
point_inside_body: 1 1 1

;[convex-polyhedron] also features a shift_vector to move a shape calculated
;near the origin to an arbitrary point.
;Example:
shift_vector: 0 10 0

;The elements need to be separated by white spaces and planes given linewise.
;Example:
planes_normal:	0 1 0 30
		0 1 0 0
		1 -0.15 0 5
		1 0.15 0 -5
		0 -0.15 1 5
		0 0.15 1 -5
               

planes_normal_coordsys: cartesian
shift_vector_coordsys: cartesian
point_inside_body_coordsys: cartesian


;If a [cylinder]-section is present a cylinder determined by two points and its
;radius is calculated.
[cylinder third]

;The [cylinder]-section requires four entries.
;Two entries, [point_1] and [point_2] specify the center of the cylinder's bases.
;Each [point_i] requires a [radius_i] which determines the size of the cylinder
;at this point. This enables trunctuated and normal cones.
;Example:
point_1: 0 0 0
point_2: 3 10 -6
radius_1: 5
radius_2: 1

;As the other bodies the [cylinder] can have a [shift_vector]-item and each
;vector can be assigned a coordinate system.
;Please note the cylinder will (so far) always be a right circular one. 

;This file is also convertible with Nanocut and creates a proper image.
