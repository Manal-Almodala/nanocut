;The input file is required to be an ini type!
;
;<item>_coordsys-item
;You can specify the coordinate system used for every(!) item
;containing vectors by adding an <item>_coordsys-item
;inside the section which contains <item>.
;This does not apply to the lattice_vector-item. It is
;required to be in cartesian coordinates.
;Possible arguments: "cartesian", "lattice"
;Be sure to note all defaults are "lattice"!
;
;Example:
basis_coordsys: cartesian
;
;Please be careful concerning your choice of numbers.
;Not integers must be given as proper floats or the input
;will be misinterpreted.
;
;Every body (so every section except for geometry) features an order item
;which is (as of now) required to be a positive integer.
;Bodies will be calculated in the specified order.
;Multiple bodies may be given the same order.
;Bodies with an even integer will be removed from the momentary amount of atoms,
;bodies with an uneven order are added.
;All bodies default order is 1.
;Bodies with order 0 or less will be ignored.

;Every ini must have a [geometry]-section!
[geometry]

;The [geometry]-section must have a lattice_vectors-item
;containing the concatenation of the three lattice vectors.
;The elements need to be separated by whitespaces and given in horizontal shape
;(first line: first vector
;second line: second vector...)
;Example:
lattice_vectors: 1.8 1.8 0
                 0 1.8 1.8
                 1.8 0 1.8

;The [geometry]-section must have a basis-item
;containing the concatenation of the atom's identifiers
;followed by their basis vectors!
;The elements need to be separated by whitespaces.
basis_vectors: C 0 0 0
               C 0.25 0.25 0.25

;If a [sphere: name]-section is present a sphere with the specified
;attributes is determined.
;You may chose any name which does not conflict with the ini conventions,
;you may also note no name but the [sphere:] section is required.
[sphere: first]

;The [sphere]-section must have a radius_vector-item
;containing a vector from the centre to an arbitrary point
;on the surface of the sphere as well as the shift_vector to the centre.
;The elements need to be separated by whitespaces.
radius_vector: 25 0 0
radius_vector_coordsys: cartesian
shift_vector: 0 0 0


;If a [convex_polyhedron: name]-section is present a body determined by a
;given amount of planes will be calculated.
;Note as with [sphere:] the section name is required yo be given up to the [:]!
[convex_polyhedron: second]

;The planes in the [convex_polyhedron]-section may be determined by
;either normal form (a plane"s normal vector and distance from the origin),
;or by miller indices and it's distance from the origin.
;To make certain the proper body is calculated a ppoint inside of the body
;should be given ([0,0,0] is default otherwise and might or might not cause errors)
;Example:
point_inside_body: 1 1 1

;[convex-polyhedron] also features a shift_vector to move a shape calculated\
;near the origin to an arbitrary point.
;Example:
shift_vector: 10 0 0
;The elements need to be separated by whitespaces and each plane should be
;given in a new line.
;Example:
planes_normal: 1 0 0 10
	           1 1 0  5
planes_miller: 1 1 1  5
               1 5 3  5