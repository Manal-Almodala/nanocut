;The input file is required to be an ini type!
;
;<item>_coordsys-item
;You can specify the coordinate system used for almost every item
;containing vectors by adding an <item>_coordsys-item
;inside the section which contains <item>.
;This does not apply to the lattice_vector-item.
;It is required to be in cartesian coordinates.
;Possible arguments: "cartesian", "lattice"
;Be sure to note all defaults are "lattice"!
;
;Example:
;basis_coordsys: cartesian
;
;Please be careful concerning your choice of numbers.
;Not integer values must be given as proper floats or the input
;may be misinterpreted.
;
;Please note: Assigning multiple items with identical names will cause only
;the last item to be used when processing.
;
;Every body (so every section except for geometry) features an order item
;which is (as of now) required to be a positive integer.
;Bodies will be calculated in the specified order.
;Multiple bodies may be given the same order.
;Bodies with an even integer will be removed from the momentary amount of atoms,
;bodies with an uneven order are added.
;All bodies default order is 1.
;Bodies with order 0 or less will be ignored.

;Every ini must have a [geometry]-section!
[geometry]

;The [geometry]-section must have a lattice_vectors-item
;containing the concatenation of the three lattice vectors!
;The elements need to be separated by white spaces and given in horizontal shape!
;(first line: first vector
;second line: second vector...)
;Example:
lattice_vectors: 6.55800000  0.00000000  0.00000000
		-2.29693588 12.41734551  0.00000000
		-1.97409838 -1.57179078  6.04874577

;The [geometry]-section must have a basis-item
;containing the concatenation of the atom's identifiers
;followed by their basis vectors!
;The elements need to be separated by whitespaces.
basis:	As  0.59500000  0.17700000  0.85030000
	As  0.45560000  0.44240000  0.87740000
	As  0.28840000  0.67670000  0.15500000
	As  0.31720000  0.94260000  0.01700000
	K   0.21230000  0.25990000  0.22610000
	K   0.89020000  0.49740000  0.41430000
	K   0.66340000  0.75830000  0.77140000
	K   0.85350000  0.99780000  0.45290000
	Se  0.68600000  0.20730000  0.22840000
	Se  0.38610000  0.98130000  0.69100000
	Se  0.43960000  0.49980000  0.56140000
	Se  0.26230000  0.24480000  0.73800000
	Se  0.66830000  0.70800000  0.24840000
	Se  0.12980000  0.48180000  0.94920000
	Sn  0.00000000  0.00000000  0.00000000
	Se  0.17580000  0.74480000  0.82280000


;The [periodicity] section requires an integer-array [axis] containing the
;direction of the periodicity. It should be given in lattice-coordinates.

[periodicity]
period_type= 1D
axis= 6 2 -3

;A possible shape for 1D-periodic structure is a cylinder.
;It requires a [periodic_1D_cylinder] section.

[noperiodic_1D_cylinder: Cylinder]

;The periodic_1D_cylinder requires a radius item. It might be an integer or float.
;Example:

radius=5

;Also the possibility to translate the cylinder is enabled via a shift_vector item
;given in an arbitrary coordinate system.


;Another possible periodic shape is a convex prism.

;It requires a [periodic_1D_convex_prism] section.
[periodic_1D_convex_prism: Prism]

;The prism can be defined by an arbitrary amount of planes.
;These can be either given in normal form (the plane's normal vector and
;distance from the origin) or by Miller indices and it's distance from the origin.
;Example:
planes_normal: 1 0 2 -5
               1 0 2 5
               1 -3 0 5
               1 -3 0 -5
planes_normal_coordsys: cartesian
;planes_miller are defined similarly.
;Of course the input should contain at least three planes and the necessary
;amount to fully include a space around the axis vector starting from the origin.
;Defining an open space will definitely cause errors.
;Also note the planes should be parallel to the periodicity axis.
;Otherwise to avoid intersection and therefore disable periodicity the planes
;will be projected to fit the axis which might will definitely differ from the input.

;periodic_1D_convex_prism also feature a shift_vector with an arbitrary
;coordinate system translating the defined shape away from the origin.
;Example:
;shift_vector: 1 2 3
;shift_vector_coordsys: cartesian

;Please note neither the planes nor the point_inside_body is assumed to be shifted.

;This file is convertible with Nanocut but it is recommended to only create
;either the cylinder or the prism (simply comment the other)
