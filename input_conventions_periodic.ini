;The input file is required to be an ini type!
;
;<item>_coordsys-item
;You can specify the coordinate system used for almost every item
;containing vectors by adding an <item>_coordsys-item
;inside the section which contains <item>.
;This does not apply to the lattice_vector-item.
;It is required to be in cartesian coordinates.
;Possible arguments: "cartesian", "lattice"
;Be sure to note all defaults are "lattice"!
;
;Example:
;basis_coordsys: cartesian
;
;Please be careful concerning your choice of numbers.
;Not integer values must be given as proper floats or the input
;may be misinterpreted.
;
;Please note: Assigning multiple items with identical names will cause only
;the last item to be used when processing.
;
;Every body (so every section except for geometry) features an order item
;which is (as of now) required to be a positive integer.
;Bodies will be calculated in the specified order.
;Multiple bodies may be given the same order.
;Bodies with an even integer will be removed from the momentary amount of atoms,
;bodies with an uneven order are added.
;All bodies default order is 1.
;Bodies with order 0 or less will be ignored.

;Every ini must have a [geometry]-section!
[geometry]

;The [geometry]-section must have a lattice_vectors-item
;containing the concatenation of the three lattice vectors!
;The elements need to be separated by white spaces and given in horizontal shape!
;(first line: first vector
;second line: second vector...)
;Example:
lattice_vectors: 1.8 1.8 0
                 0 1.8 1.8
                 1.8 0 1.8

;The [geometry]-section must have a basis-item
;containing the concatenation of the atom's identifiers
;followed by their basis vectors!
;The elements need to be separated by whitespaces.
basis: C 0 0 0
       C 0.25 0.25 0.25

;If the unit element of a 1D-periodic structure is desired the [periodicity_1D]
;class should be used.


;A possible shape for 1D-periodic structure is a cylinder.
;It requires a [periodic_1D_cylinder:] section.

[noperiodic_1D_cylinder: Cylinder]

;The periodic_1D_cylinder requires a radius item. It might be an integer or float.
;Example:

radius=5

;Also the possibility to translate the cylinder is enabled via a shift_vector item
;with an arbitrary coordinate system.

;The [periodicity] section requires an integer-array [axis] containing the
;direction of the periodicity. It should be given in lattice-coordinates.

[periodicity]
period_type= 1D
axis= 1 1 1

[noperiodic_1D_cylinder: asdasd]

radius=3
shift_vector=1 0 0
shift_vector_coordsys=cartesian


;A further possible shape is a prism.
;It requires a [periodic_1D_convex_prism] section. Please note the colon!
[periodic_1D_convex_prism: Prism]

;The prism can be defined by an arbitrary amount of planes.
;These can be either given in normal form (the plane's normal vector and
;distance from the origin) or by Miller indices and it's distance from the origin.
;Example:
planes_normal: 0 -1 1 -5
               0 -1 1 5
               -1 1 0 5
               -1 1 0 -5
planes_normal_coordsys: cartesian
;planes_miller are defined similarly.
;Of course the input should contain at least three planes and the necessary
;amount to fully include a space around the axis vector starting from the origin.
;Defining an open space will definitely cause errors.
;A point_inside_body-item can be determined so the defined planes aren't
;required to be around the origin. The default value is (0 0 0) so no input is
;required if the plains surround the origin.
;Example:
point_inside_body: 1 1 1

;periodic_1D_convex_prism also feature a shift_vector with an arbitrary
;coordinate system translating the defined shape away from the origin.
;Example:
;shift_vector: 0 0 0

;This file is convertible with Nanocut but it is recommended to only create
;either the cylinder or the prism (simply comment the other)
