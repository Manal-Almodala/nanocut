#!/usr/bin/env python

import sys
import os
import Numeric as num

# Append library path before importing own libraries
sys.path.append(os.path.join(os.path.dirname(sys.argv[0]),'..', "lib",
                             "python"))
import geometry

scriptName = os.path.basename(sys.argv[0])
genformat = scriptName == "repeatgen"

printLatVec = False
if not genformat and len(sys.argv) > 1 and sys.argv[1] == "-L":
  printLatVec = True
  del sys.argv[1]

periodic = False
if not genformat and len(sys.argv) > 2 and sys.argv[1] == "-l":
  del sys.argv[1]
  f = open(sys.argv[1], "r")
  latVecsTxt = f.read()
  f.close()
  lines = latVecsTxt.strip().split("\n")
  latVecs = num.zeros((3, 3), num.Float)
  for ii in range(3):
    words = lines[ii].split()
    latVecs[ii] = [ float(s) for s in words ]
  periodic = True
  del sys.argv[1]

if len(sys.argv) < 5:
  print >> sys.stderr, "%s: Bad nr. of arguments"  % scriptName
  if genformat:
    print >> sys.stderr, "Usage: %s <geometry> <nx> <ny> <nz>\n" % scriptName
  else:
    print >> sys.stderr, (
      "Usage: %s [ -L ] [ -l latvec ] <geometry> <nx> <ny> <nz>\n"
      " -L for printing lattice vectors into the xyz-file\n"
      " -l for specifying a file containing the lattice vectors" % scriptName)
  sys.exit(1)

fileName = sys.argv[1]
ff = open(fileName, "r")
if genformat:
  geos = geometry.gens2geos(ff.read())
else:
  geos = geometry.xyzs2geos(ff.read())
ff.close()


if periodic:
  for geo in geos:
    geo.periodic = True
    geo.latVecs = latVecs

factor = num.array([ int(s) for s in sys.argv[2:5] ], num.Int)
nCell = num.product(factor)
if nCell < 1:
  print >> sys.stderr, "Product of the repeat factors must be greater than one."
  sys.exit(1)

for geo in geos:
  if not geo.periodic:
    print >> sys.stderr, "Provided structure is not periodic"
    sys.exit(1)

  geo.indexes = num.resize(geo.indexes, (len(geo.indexes)*nCell,))
  geo.nAtom = geo.nAtom * nCell
  newCoords = []
  coeffs = num.zeros((3,1), num.Float)
  for i1 in range(factor[0]):
    coeffs[0][0] = float(i1)
    for i2 in range(factor[1]):
      coeffs[1][0] = float(i2)
      for i3 in range(factor[2]):
        coeffs[2][0] = float(i3)
        transl = sum(coeffs * geo.latVecs, 0)
        newCoords.append(geo.coords + transl)
  geo.coords = num.reshape(newCoords, (-1, 3))
  geo.latVecs = (coeffs + [[1.0], [1.0], [1.0]]) * geo.latVecs

  if genformat:
    print geometry.geo2gen(geo)
  else:
    print geometry.geo2xyz(geo, printLatVec=printLatVec)



      

### Local Variables:
### mode:python
### End:
